#!/bin/sh
# Pre-commit hook to run goimports, gofmt, go vet, staticcheck, and golangci-lint

# Run goimports on all Go files
echo "Running goimports..."
find . -name "*.go" -not -path "./vendor/*" -not -path "./.git/*" | xargs goimports -w
if [ $? -ne 0 ]; then
    echo "goimports failed"
    exit 1
fi

# Run gofmt on all Go files
echo "Running gofmt..."
find . -name "*.go" -not -path "./vendor/*" -not -path "./.git/*" | xargs gofmt -w -s
if [ $? -ne 0 ]; then
    echo "gofmt failed"
    exit 1
fi

# Stage any formatting changes
git add -u

# Check if there are any unformatted files (CI check)
echo "Checking for unformatted files..."
unformatted=$(gofmt -l .)
if [ ! -z "$unformatted" ]; then
    echo "Error: Found unformatted files:"
    echo "$unformatted"
    echo "Please run 'gofmt -w' on these files"
    exit 1
fi

# Run go vet
echo "Running go vet..."
go vet ./...
if [ $? -ne 0 ]; then
    echo "go vet failed"
    exit 1
fi

# Run staticcheck if available
if command -v staticcheck &> /dev/null; then
    echo "Running staticcheck..."
    # Run staticcheck and filter out unused warnings in test files
    staticcheck_output=$(staticcheck ./... 2>&1 | grep -v "module requires at least go1.24.3" || true)
    # Check for critical staticcheck errors (excluding unused in test files)
    critical_staticcheck=$(echo "$staticcheck_output" | grep -v "_test.go.*is unused (U1000)" | grep -v "^$" || true)
    if [ ! -z "$critical_staticcheck" ]; then
        echo "Staticcheck errors found:"
        echo "$critical_staticcheck"
        exit 1
    fi
fi

# Run tests with race detection
echo "Running tests..."
go test ./... -race
if [ $? -ne 0 ]; then
    echo "Tests failed"
    exit 1
fi

# Run golangci-lint (only fail on critical issues)
echo "Running golangci-lint..."
# Check for critical issues only (errcheck, staticcheck, gocritic, etc.)
# Ignore cognitive complexity and unused warnings which are less critical
output=$(golangci-lint run --timeout 5m 2>&1)
critical_issues=$(echo "$output" | grep -E "(errcheck|staticcheck|gosec|gocritic|ineffassign|misspell|govet)" | grep -v "cognitive complexity" || true)

if [ ! -z "$critical_issues" ]; then
    echo "Critical linting issues found:"
    echo "$critical_issues"
    echo ""
    echo "Please fix the critical linting issues before committing"
    exit 1
fi

# Show all issues for awareness but don't fail
if [ ! -z "$output" ]; then
    non_critical=$(echo "$output" | grep -E "(gocognit|unused)" || true)
    if [ ! -z "$non_critical" ]; then
        echo ""
        echo "Non-critical linting issues (commit will proceed):"
        echo "$non_critical"
    fi
fi

echo ""
echo "Pre-commit checks passed!"